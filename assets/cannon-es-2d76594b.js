class Z{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,i=t.x,n=t.y,o=t.z;return e.x=s[0]*i+s[1]*n+s[2]*o,e.y=s[3]*i+s[4]*n+s[5]*o,e.z=s[6]*i+s[7]*n+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Z);const s=this.elements,i=t.elements,n=e.elements,o=s[0],r=s[1],l=s[2],a=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],y=i[0],m=i[1],w=i[2],v=i[3],x=i[4],g=i[5],E=i[6],C=i[7],B=i[8];return n[0]=o*y+r*v+l*E,n[1]=o*m+r*x+l*C,n[2]=o*w+r*g+l*B,n[3]=a*y+d*v+u*E,n[4]=a*m+d*x+u*C,n[5]=a*w+d*g+u*B,n[6]=h*y+f*v+p*E,n[7]=h*m+f*x+p*C,n[8]=h*w+f*g+p*B,e}scale(t,e){e===void 0&&(e=new Z);const s=this.elements,i=e.elements;for(let n=0;n!==3;n++)i[3*n+0]=t.x*s[3*n+0],i[3*n+1]=t.y*s[3*n+1],i[3*n+2]=t.z*s[3*n+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,i=4,n=[];let o,r;for(o=0;o<s*i;o++)n.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)n[o+i*r]=this.elements[o+3*r];n[3+4*0]=t.x,n[3+4*1]=t.y,n[3+4*2]=t.z;let l=3;const a=l;let d;const u=4;let h;do{if(o=a-l,n[o+i*o]===0){for(r=o+1;r<a;r++)if(n[o+i*r]!==0){d=u;do h=u-d,n[h+i*o]+=n[h+i*r];while(--d);break}}if(n[o+i*o]!==0)for(r=o+1;r<a;r++){const f=n[o+i*r]/n[o+i*o];d=u;do h=u-d,n[h+i*r]=h<=o?0:n[h+i*r]-n[h+i*o]*f;while(--d)}}while(--l);if(e.z=n[2*i+3]/n[2*i+2],e.y=(n[1*i+3]-n[1*i+2]*e.z)/n[1*i+1],e.x=(n[0*i+3]-n[0*i+2]*e.z-n[0*i+1]*e.y)/n[0*i+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Z);const e=3,s=6,i=fe;let n,o;for(n=0;n<3;n++)for(o=0;o<3;o++)i[n+s*o]=this.elements[n+3*o];i[3+6*0]=1,i[3+6*1]=0,i[3+6*2]=0,i[4+6*0]=0,i[4+6*1]=1,i[4+6*2]=0,i[5+6*0]=0,i[5+6*1]=0,i[5+6*2]=1;let r=3;const l=r;let a;const d=s;let u;do{if(n=l-r,i[n+s*n]===0){for(o=n+1;o<l;o++)if(i[n+s*o]!==0){a=d;do u=d-a,i[u+s*n]+=i[u+s*o];while(--a);break}}if(i[n+s*n]!==0)for(o=n+1;o<l;o++){const h=i[n+s*o]/i[n+s*n];a=d;do u=d-a,i[u+s*o]=u<=n?0:i[u+s*o]-i[u+s*n]*h;while(--a)}}while(--r);n=2;do{o=n-1;do{const h=i[n+s*o]/i[n+s*n];a=s;do u=s-a,i[u+s*o]=i[u+s*o]-i[u+s*n]*h;while(--a)}while(o--)}while(--n);n=2;do{const h=1/i[n+s*n];a=s;do u=s-a,i[u+s*n]=i[u+s*n]*h;while(--a)}while(n--);n=2;do{o=2;do{if(u=i[e+o+s*n],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(n,o,u)}while(o--)}while(n--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,n=t.w,o=e+e,r=s+s,l=i+i,a=e*o,d=e*r,u=e*l,h=s*r,f=s*l,p=i*l,y=n*o,m=n*r,w=n*l,v=this.elements;return v[3*0+0]=1-(h+p),v[3*0+1]=d-w,v[3*0+2]=u+m,v[3*1+0]=d+w,v[3*1+1]=1-(a+p),v[3*1+2]=f-y,v[3*2+0]=u-m,v[3*2+1]=f+y,v[3*2+2]=1-(a+h),this}transpose(t){t===void 0&&(t=new Z);const e=this.elements,s=t.elements;let i;return s[0]=e[0],s[4]=e[4],s[8]=e[8],i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i,t}}const fe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,i=t.y,n=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*n-l*i,e.y=l*s-o*n,e.z=o*i-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Z([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const n=1/i;this.x*=n,this.y*=n,this.z*=n}else this.x=0,this.y=0,this.z=0;return i}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,i=this.z;let n=Math.sqrt(e*e+s*s+i*i);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=i*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i)}scale(t,e){e===void 0&&(e=new c);const s=this.x,i=this.y,n=this.z;return e.x=t*s,e.y=t*i,e.z=t*n,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=ve,n=1/s;i.set(this.x*n,this.y*n,this.z*n);const o=me;Math.abs(i.x)<.9?(o.set(1,0,0),i.cross(o,t)):(o.set(0,1,0),i.cross(o,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,n=this.y,o=this.z;s.x=i+(t.x-i)*e,s.y=n+(t.y-n)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(kt),kt.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0);c.UNIT_X=new c(1,0,0);c.UNIT_Y=new c(0,1,0);c.UNIT_Z=new c(0,0,1);const ve=new c,me=new c,kt=new c;class U{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const n=this.lowerBound,o=this.upperBound,r=s;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let l=1;l<t.length;l++){let a=t[l];r&&(r.vmult(a,jt),a=jt),a.x>o.x&&(o.x=a.x),a.x<n.x&&(n.x=a.x),a.y>o.y&&(o.y=a.y),a.y<n.y&&(n.y=a.y),a.z>o.z&&(o.z=a.z),a.z<n.z&&(n.z=a.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),i&&(n.x-=i,n.y-=i,n.z-=i,o.x+=i,o.y+=i,o.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new U().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound,o=i.x<=s.x&&s.x<=n.x||e.x<=n.x&&n.x<=s.x,r=i.y<=s.y&&s.y<=n.y||e.y<=n.y&&n.y<=s.y,l=i.z<=s.z&&s.z<=n.z||e.z<=n.z&&n.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound;return e.x<=i.x&&s.x>=n.x&&e.y<=i.y&&s.y>=n.y&&e.z<=i.z&&s.z>=n.z}getCorners(t,e,s,i,n,o,r,l){const a=this.lowerBound,d=this.upperBound;t.copy(a),e.set(d.x,a.y,a.z),s.set(d.x,d.y,a.z),i.set(a.x,d.y,d.z),n.set(d.x,a.y,d.z),o.set(a.x,d.y,a.z),r.set(a.x,a.y,d.z),l.copy(d)}toLocalFrame(t,e){const s=Vt,i=s[0],n=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(i,n,o,r,l,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Vt,i=s[0],n=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(i,n,o,r,l,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*i,l=(this.upperBound.x-s.x)*i,a=(this.lowerBound.y-s.y)*n,d=(this.upperBound.y-s.y)*n,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(a,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,l),Math.max(a,d)),Math.max(u,h));return!(p<0||f>p)}}const jt=new c,Vt=[new c,new c,new c,new c,new c,new c,new c,new c];class Gt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const n=i;i=s,s=n}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:n}=e;if(n>i){const o=n;n=i,i=o}this.matrix[(i*(i+1)>>1)+n-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class oe{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const i=s[t].indexOf(e);return i!==-1&&s[t].splice(i,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let i=0,n=s.length;i<n;i++)s[i].call(this,t)}return this}}class G{constructor(t,e,s,i){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),i===void 0&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ye,i=we;t.tangents(s,i),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,i=this.y,n=this.z,o=this.w,r=t.x,l=t.y,a=t.z,d=t.w;return e.x=s*d+o*r+i*a-n*l,e.y=i*d+o*l+n*r-s*a,e.z=n*d+o*a+s*l-i*r,e.w=o*d-s*r-i*l-n*a,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,i=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+s*s+i*i+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,i=t.y,n=t.z,o=this.x,r=this.y,l=this.z,a=this.w,d=a*s+r*n-l*i,u=a*i+l*s-o*n,h=a*n+o*i-r*s,f=-o*s-r*i-l*n;return e.x=d*a+f*-o+u*-l-h*-r,e.y=u*a+f*-r+h*-o-d*-l,e.z=h*a+f*-l+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,i,n;const o=this.x,r=this.y,l=this.z,a=this.w;switch(e){case"YZX":const d=o*r+l*a;if(d>.499&&(s=2*Math.atan2(o,a),i=Math.PI/2,n=0),d<-.499&&(s=-2*Math.atan2(o,a),i=-Math.PI/2,n=0),s===void 0){const u=o*o,h=r*r,f=l*l;s=Math.atan2(2*r*a-2*o*l,1-2*h-2*f),i=Math.asin(2*d),n=Math.atan2(2*o*a-2*r*l,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=i,t.x=n}setFromEuler(t,e,s,i){i===void 0&&(i="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),a=Math.sin(e/2),d=Math.sin(s/2);return i==="XYZ"?(this.x=l*o*r+n*a*d,this.y=n*a*r-l*o*d,this.z=n*o*d+l*a*r,this.w=n*o*r-l*a*d):i==="YXZ"?(this.x=l*o*r+n*a*d,this.y=n*a*r-l*o*d,this.z=n*o*d-l*a*r,this.w=n*o*r+l*a*d):i==="ZXY"?(this.x=l*o*r-n*a*d,this.y=n*a*r+l*o*d,this.z=n*o*d+l*a*r,this.w=n*o*r-l*a*d):i==="ZYX"?(this.x=l*o*r-n*a*d,this.y=n*a*r+l*o*d,this.z=n*o*d-l*a*r,this.w=n*o*r+l*a*d):i==="YZX"?(this.x=l*o*r+n*a*d,this.y=n*a*r+l*o*d,this.z=n*o*d-l*a*r,this.w=n*o*r-l*a*d):i==="XZY"&&(this.x=l*o*r-n*a*d,this.y=n*a*r-l*o*d,this.z=n*o*d+l*a*r,this.w=n*o*r+l*a*d),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const i=this.x,n=this.y,o=this.z,r=this.w;let l=t.x,a=t.y,d=t.z,u=t.w,h,f,p,y,m;return f=i*l+n*a+o*d+r*u,f<0&&(f=-f,l=-l,a=-a,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),y=Math.sin((1-e)*h)/p,m=Math.sin(e*h)/p):(y=1-e,m=e),s.x=y*i+m*l,s.y=y*n+m*a,s.z=y*o+m*d,s.w=y*r+m*u,s}integrate(t,e,s,i){i===void 0&&(i=new G);const n=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,a=this.y,d=this.z,u=this.w,h=e*.5;return i.x+=h*(n*u+o*d-r*a),i.y+=h*(o*u+r*l-n*d),i.z+=h*(r*u+n*a-o*l),i.w+=h*(-n*l-o*a-r*d),i}}const ye=new c,we=new c,xe={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class S{constructor(t){t===void 0&&(t={}),this.id=S.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}S.idCounter=0;S.types=xe;class W{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return i===void 0&&(i=new c),s.vsub(t,i),e.conjugate(Ht),Ht.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return i===void 0&&(i=new c),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return i===void 0&&(i=new c),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const Ht=new G;class mt extends S{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:n,boundingSphereRadius:o}=t;super({type:S.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new c;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let l=0;l!==r;l++){const a=(l+1)%r;e[o[l]].vsub(e[o[a]],i),i.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(i)||s[u].almostEquals(i)){d=!0;break}d||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let i=0;i<this.faces[t].length;i++)if(!this.vertices[this.faces[t][i]])throw new Error(`Vertex ${this.faces[t][i]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let i=0;i<this.faces[t].length;i++)console.warn(`.vertices[${this.faces[t][i]}] = Vec3(${this.vertices[this.faces[t][i]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],n=this.vertices[s[1]],o=this.vertices[s[2]];mt.computeNormal(i,n,o,e)}static computeNormal(t,e,s,i){const n=new c,o=new c;e.vsub(t,o),s.vsub(e,n),n.cross(o,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,n,o,r,l,a){const d=new c;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),n.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const y=s.vertices[s.faces[u][p]],m=new c;m.copy(y),n.vmult(m,m),i.vadd(m,m),f.push(m)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,a)}findSeparatingAxis(t,e,s,i,n,o,r,l){const a=new c,d=new c,u=new c,h=new c,f=new c,p=new c;let y=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let w=0;w!==m.uniqueAxes.length;w++){s.vmult(m.uniqueAxes[w],a);const v=m.testSepAxis(a,t,e,s,i,n);if(v===!1)return!1;v<y&&(y=v,o.copy(a))}else{const w=r?r.length:m.faces.length;for(let v=0;v<w;v++){const x=r?r[v]:v;a.copy(m.faceNormals[x]),s.vmult(a,a);const g=m.testSepAxis(a,t,e,s,i,n);if(g===!1)return!1;g<y&&(y=g,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){n.vmult(t.uniqueAxes[w],d);const v=m.testSepAxis(d,t,e,s,i,n);if(v===!1)return!1;v<y&&(y=v,o.copy(d))}else{const w=l?l.length:t.faces.length;for(let v=0;v<w;v++){const x=l?l[v]:v;d.copy(t.faceNormals[x]),n.vmult(d,d);const g=m.testSepAxis(d,t,e,s,i,n);if(g===!1)return!1;g<y&&(y=g,o.copy(d))}}for(let w=0;w!==m.uniqueEdges.length;w++){s.vmult(m.uniqueEdges[w],h);for(let v=0;v!==t.uniqueEdges.length;v++)if(n.vmult(t.uniqueEdges[v],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=m.testSepAxis(p,t,e,s,i,n);if(x===!1)return!1;x<y&&(y=x,o.copy(p))}}return i.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,i,n,o){const r=this;mt.project(r,t,s,i,Mt),mt.project(e,t,n,o,Tt);const l=Mt[0],a=Mt[1],d=Tt[0],u=Tt[1];if(l<u||d<a)return!1;const h=l-u,f=d-a;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,i=new c;this.computeLocalAABB(i,s);const n=s.x-i.x,o=s.y-i.y,r=s.z-i.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*n*2*n+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,n,o,r){const l=new c,a=new c,d=new c,u=new c,h=new c,f=new c,p=new c,y=new c,m=this,w=[],v=i,x=w;let g=-1,E=Number.MAX_VALUE;for(let T=0;T<m.faces.length;T++){l.copy(m.faceNormals[T]),s.vmult(l,l);const P=l.dot(t);P<E&&(E=P,g=T)}if(g<0)return;const C=m.faces[g];C.connectedFaces=[];for(let T=0;T<m.faces.length;T++)for(let P=0;P<m.faces[T].length;P++)C.indexOf(m.faces[T][P])!==-1&&T!==g&&C.connectedFaces.indexOf(T)===-1&&C.connectedFaces.push(T);const B=C.length;for(let T=0;T<B;T++){const P=m.vertices[C[T]],q=m.vertices[C[(T+1)%B]];P.vsub(q,a),d.copy(a),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(P),s.vmult(f,f),e.vadd(f,f);const b=C.connectedFaces[T];p.copy(this.faceNormals[b]);const N=this.getPlaneConstantOfFace(b);y.copy(p),s.vmult(y,y);const A=N-y.dot(e);for(this.clipFaceAgainstPlane(v,x,y,A);v.length;)v.shift();for(;x.length;)v.push(x.shift())}p.copy(this.faceNormals[g]);const F=this.getPlaneConstantOfFace(g);y.copy(p),s.vmult(y,y);const _=F-y.dot(e);for(let T=0;T<v.length;T++){let P=y.dot(v[T])+_;if(P<=n&&(console.log(`clamped: depth=${P} to minDist=${n}`),P=n),P<=o){const q=v[T];if(P<=1e-6){const b={point:q,normal:y,depth:P};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,i){let n,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],a=t[0];n=s.dot(l)+i;for(let d=0;d<r;d++){if(a=t[d],o=s.dot(a)+i,n<0)if(o<0){const u=new c;u.copy(a),e.push(u)}else{const u=new c;l.lerp(a,n/(n-o),u),e.push(u)}else if(o<0){const u=new c;l.lerp(a,n/(n-o),u),e.push(u),e.push(a)}l=a,n=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,i=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(s[n],i[n]),t.vadd(i[n],i[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const n=s[i];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,i=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(s[n],i[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=this.vertices;let o,r,l,a,d,u,h=new c;for(let f=0;f<n.length;f++){h.copy(n[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(l===void 0||p.z<l)&&(l=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,l),i.set(a,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let n=0;n<s;n++){const o=i[n];e.vmult(o,o)}for(let n=0;n<this.faceNormals.length;n++){const o=this.faceNormals[n];e.vmult(o,o)}}if(t)for(let n=0;n<s;n++){const o=i[n];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,n=null,o=new c;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let l=i[r];const a=e[s[r][0]],d=new c;t.vsub(a,d);const u=l.dot(d),h=new c;o.vsub(a,h);const f=l.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return n?1:-1}static project(t,e,s,i,n){const o=t.vertices.length,r=ge;let l=0,a=0;const d=be,u=t.vertices;d.setZero(),W.vectorToLocalFrame(s,i,e,r),W.pointToLocalFrame(s,i,d,d);const h=d.dot(r);a=l=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>l&&(l=p),p<a&&(a=p)}if(a-=h,l-=h,a>l){const f=a;a=l,l=f}n[0]=l,n[1]=a}}const Mt=[],Tt=[];new c;const ge=new c,be=new c;class Rt extends S{constructor(t){super({type:S.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=c,n=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],l=new mt({vertices:n,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),Rt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),e!==void 0)for(let n=0;n!==s.length;n++)e.vmult(s[n],s[n]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,n=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let o=0;o<n.length;o++)ot.set(n[o][0],n[o][1],n[o][2]),e.vmult(ot,ot),t.vadd(ot,ot),s(ot.x,ot.y,ot.z)}calculateWorldAABB(t,e,s,i){const n=this.halfExtents;K[0].set(n.x,n.y,n.z),K[1].set(-n.x,n.y,n.z),K[2].set(-n.x,-n.y,n.z),K[3].set(-n.x,-n.y,-n.z),K[4].set(n.x,-n.y,-n.z),K[5].set(n.x,n.y,-n.z),K[6].set(-n.x,n.y,-n.z),K[7].set(n.x,-n.y,n.z);const o=K[0];e.vmult(o,o),t.vadd(o,o),i.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=K[r];e.vmult(l,l),t.vadd(l,l);const a=l.x,d=l.y,u=l.z;a>i.x&&(i.x=a),d>i.y&&(i.y=d),u>i.z&&(i.z=u),a<s.x&&(s.x=a),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const ot=new c,K=[new c,new c,new c,new c,new c,new c,new c,new c],qt={DYNAMIC:1,STATIC:2,KINEMATIC:4},Lt={AWAKE:0,SLEEPY:1,SLEEPING:2};class M extends oe{constructor(t){t===void 0&&(t={}),super(),this.id=M.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?M.STATIC:M.DYNAMIC,typeof t.type==typeof M.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=M.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new Z,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new Z,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new U,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=M.AWAKE,this.wakeUpAfterNarrowphase=!1,t===M.SLEEPING&&this.dispatchEvent(M.wakeupEvent)}sleep(){this.sleepState=M.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===M.AWAKE&&s<i?(this.sleepState=M.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(M.sleepyEvent)):e===M.SLEEPY&&s>i?this.wakeUp():e===M.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(M.sleepEvent))}}updateSolveMassProperties(){this.sleepState===M.SLEEPING||this.type===M.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new c,n=new G;return e&&i.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let n=0;n!==s;n++){const o=t[n];o.updateBoundingSphereRadius();const r=e[n].length(),l=o.boundingSphereRadius;r+l>i&&(i=r+l)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,n=Ee,o=ze,r=this.quaternion,l=this.aabb,a=Ce;for(let d=0;d!==i;d++){const u=t[d];r.vmult(e[d],n),n.vadd(this.position,n),r.mult(s[d],o),u.calculateWorldAABB(n,o,a.lowerBound,a.upperBound),d===0?l.copy(a):l.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=Ae,i=Ne;s.setRotationFromQuaternion(this.quaternion),s.transpose(i),s.scale(e,s),s.mmult(i,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=Se;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==M.DYNAMIC)return;const s=Me,i=Te;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===M.DYNAMIC&&(this.sleepState===M.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==M.DYNAMIC)return;this.sleepState===M.SLEEPING&&this.wakeUp();const s=e,i=Fe;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const n=Ie;s.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==M.DYNAMIC)return;const s=Pe,i=_e;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=Re;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Rt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===M.DYNAMIC||this.type===M.KINEMATIC)||this.sleepState===M.SLEEPING)return;const i=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,l=this.torque,a=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;i.x+=r.x*f*h.x,i.y+=r.y*f*h.y,i.z+=r.z*f*h.z;const p=u.elements,y=this.angularFactor,m=l.x*y.x,w=l.y*y.y,v=l.z*y.z;n.x+=t*(p[0]*m+p[1]*w+p[2]*v),n.y+=t*(p[3]*m+p[4]*w+p[5]*v),n.z+=t*(p[6]*m+p[7]*w+p[8]*v),o.x+=i.x*t,o.y+=i.y*t,o.z+=i.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}M.idCounter=0;M.COLLIDE_EVENT_NAME="collide";M.DYNAMIC=qt.DYNAMIC;M.STATIC=qt.STATIC;M.KINEMATIC=qt.KINEMATIC;M.AWAKE=Lt.AWAKE;M.SLEEPY=Lt.SLEEPY;M.SLEEPING=Lt.SLEEPING;M.wakeupEvent={type:"wakeup"};M.sleepyEvent={type:"sleepy"};M.sleepEvent={type:"sleep"};const Ee=new c,ze=new G,Ce=new U,Ae=new Z,Ne=new Z,Be=new Z,Se=new c,Me=new c,Te=new c,Fe=new c,Ie=new c,Pe=new c,_e=new c,Re=new c;class re{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&M.STATIC||t.sleepState===M.SLEEPING)&&(e.type&M.STATIC||e.sleepState===M.SLEEPING))}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const n=qe;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=Le,i=Oe,n=We,o=t.length;for(let r=0;r!==o;r++)i[r]=t[r],n[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=i[r].id,a=n[r].id,d=l<a?`${l},${a}`:`${a},${l}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),a=s[l];t.push(i[a]),e.push(n[a]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const i=t.shapes[0],n=e.shapes[0];return Math.pow(i.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const qe=new c;new c;new G;new c;const Le={keys:[]},Oe=[],We=[];new c;new c;new c;class ke extends re{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,n=i.length;let o,r;for(let l=0;l!==n;l++)for(let a=0;a!==l;a++)o=i[l],r=i[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let i=0;i<t.bodies.length;i++){const n=t.bodies[i];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&s.push(n)}return s}}class Ct{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=n,this.body=o,this.distance=r}}let ce,le,ae,he,de,ue,pe;const Ot={CLOSEST:1,ANY:2,ALL:4};ce=S.types.SPHERE;le=S.types.PLANE;ae=S.types.BOX;he=S.types.CYLINDER;de=S.types.CONVEXPOLYHEDRON;ue=S.types.HEIGHTFIELD;pe=S.types.TRIMESH;class V{get[ce](){return this._intersectSphere}get[le](){return this._intersectPlane}get[ae](){return this._intersectBox}get[he](){return this._intersectConvex}get[de](){return this._intersectConvex}get[ue](){return this._intersectHeightfield}get[pe](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=V.ANY,this.result=new Ct,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||V.ANY,this.result=e.result||new Ct,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Yt),Ft.length=0,t.broadphase.aabbQuery(t,Yt,Ft),this.intersectBodies(Ft),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const i=je,n=Ve;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],n),t.quaternion.vmult(t.shapeOffsets[o],i),i.vadd(t.position,i),this.intersectShape(l,n,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,i=t.length;!this.result.shouldStop&&s<i;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const n=this.from;if(ss(n,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,n)}_intersectPlane(t,e,s,i,n){const o=this.from,r=this.to,l=this.direction,a=new c(0,0,1);e.vmult(a,a);const d=new c;o.vsub(s,d);const u=d.dot(a);r.vsub(s,d);const h=d.dot(a);if(u*h>0||o.distanceTo(r)<u)return;const f=a.dot(l);if(Math.abs(f)<this.precision)return;const p=new c,y=new c,m=new c;o.vsub(s,p);const w=-a.dot(p)/f;l.scale(w,y),o.vadd(y,m),this.reportIntersection(a,m,n,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,n=this.from;e.x=Math.min(i.x,n.x),e.y=Math.min(i.y,n.y),e.z=Math.min(i.z,n.z),s.x=Math.max(i.x,n.x),s.y=Math.max(i.y,n.y),s.z=Math.max(i.z,n.z)}_intersectHeightfield(t,e,s,i,n){t.data,t.elementSize;const o=Ge;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=He;let l,a,d,u;l=a=0,d=u=t.data.length-1;const h=new U;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),l=Math.max(l,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=l;f<d;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),W.pointToWorldFrame(s,e,t.pillarOffset,xt),this._intersectConvex(t.pillarConvex,e,xt,i,n,Dt),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),W.pointToWorldFrame(s,e,t.pillarOffset,xt),this._intersectConvex(t.pillarConvex,e,xt,i,n,Dt)}}}_intersectSphere(t,e,s,i,n){const o=this.from,r=this.to,l=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,h=d**2-4*a*u,f=Ye,p=De;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1);else{const y=(-d-Math.sqrt(h))/(2*a),m=(-d+Math.sqrt(h))/(2*a);if(y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1)),this.result.shouldStop)return;m>=0&&m<=1&&(o.lerp(r,m,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,n,i,-1))}}_intersectConvex(t,e,s,i,n,o){const r=Xe,l=Xt,a=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,y=this.to,m=p.distanceTo(y),w=a?a.length:d.length,v=this.result;for(let x=0;!v.shouldStop&&x<w;x++){const g=a?a[x]:x,E=d[g],C=h[g],B=e,F=s;l.copy(u[E[0]]),B.vmult(l,l),l.vadd(F,l),l.vsub(p,l),B.vmult(C,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const T=r.dot(l)/_;if(!(T<0)){f.scale(T,X),X.vadd(p,X),$.copy(u[E[0]]),B.vmult($,$),F.vadd($,$);for(let P=1;!v.shouldStop&&P<E.length-1;P++){J.copy(u[E[P]]),Q.copy(u[E[P+1]]),B.vmult(J,J),B.vmult(Q,Q),F.vadd(J,J),F.vadd(Q,Q);const q=X.distanceTo(p);!(V.pointInTriangle(X,$,J,Q)||V.pointInTriangle(X,J,$,Q))||q>m||this.reportIntersection(r,X,n,i,g)}}}}_intersectTrimesh(t,e,s,i,n,o){const r=Ue,l=ts,a=es,d=Xt,u=$e,h=Ze,f=Ke,p=Qe,y=Je,m=t.indices;t.vertices;const w=this.from,v=this.to,x=this.direction;a.position.copy(s),a.quaternion.copy(e),W.vectorToLocalFrame(s,e,x,u),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,v,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,a,l);for(let E=0,C=l.length;!this.result.shouldStop&&E!==C;E++){const B=l[E];t.getNormal(B,r),t.getVertex(m[B*3],$),$.vsub(h,d);const F=u.dot(r),_=r.dot(d)/F;if(_<0)continue;u.scale(_,X),X.vadd(h,X),t.getVertex(m[B*3+1],J),t.getVertex(m[B*3+2],Q);const T=X.distanceSquared(h);!(V.pointInTriangle(X,J,$,Q)||V.pointInTriangle(X,$,J,Q))||T>g||(W.vectorToWorldFrame(e,r,y),W.pointToWorldFrame(s,e,X,p),this.reportIntersection(y,p,n,i,B))}l.length=0}reportIntersection(t,e,s,i,n){const o=this.from,r=this.to,l=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof n<"u"?n:-1,this.mode){case V.ALL:this.hasHit=!0,a.set(o,r,t,e,s,i,l),a.hasHit=!0,this.callback(a);break;case V.CLOSEST:(l<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,i,l));break;case V.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,i,l),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,i){i.vsub(e,ct),s.vsub(e,dt),t.vsub(e,It);const n=ct.dot(ct),o=ct.dot(dt),r=ct.dot(It),l=dt.dot(dt),a=dt.dot(It);let d,u;return(d=l*r-o*a)>=0&&(u=n*a-o*r)>=0&&d+u<n*l-o*o}}V.CLOSEST=Ot.CLOSEST;V.ANY=Ot.ANY;V.ALL=Ot.ALL;const Yt=new U,Ft=[],dt=new c,It=new c,je=new c,Ve=new G,X=new c,$=new c,J=new c,Q=new c;new c;new Ct;const Dt={faceList:[0]},xt=new c,Ge=new V,He=[],Ye=new c,De=new c,Xe=new c;new c;new c;const Xt=new c,Ue=new c,$e=new c,Ze=new c,Ke=new c,Je=new c,Qe=new c;new U;const ts=[],es=new W,ct=new c,gt=new c;function ss(O,t,e){e.vsub(O,ct);const s=ct.dot(t);return t.scale(s,gt),gt.vadd(O,gt),e.distanceTo(gt)}class vt extends re{static checkBounds(t,e,s){let i,n;s===0?(i=t.position.x,n=e.position.x):s===1?(i=t.position.y,n=e.position.y):s===2&&(i=t.position.z,n=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,l=i+o;return n-r<l}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let n;for(n=e-1;n>=0&&!(t[n].aabb.lowerBound.x<=i.aabb.lowerBound.x);n--)t[n+1]=t[n];t[n+1]=i}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let n;for(n=e-1;n>=0&&!(t[n].aabb.lowerBound.y<=i.aabb.lowerBound.y);n--)t[n+1]=t[n];t[n+1]=i}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const i=t[e];let n;for(n=e-1;n>=0&&!(t[n].aabb.lowerBound.z<=i.aabb.lowerBound.z);n--)t[n+1]=t[n];t[n+1]=i}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const i=e.indexOf(s.body);i!==-1&&e.splice(i,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,n=i.length,o=this.axisIndex;let r,l;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==n;r++){const a=i[r];for(l=r+1;l<n;l++){const d=i[l];if(this.needBroadphaseCollision(a,d)){if(!vt.checkBounds(a,d,o))break;this.intersectionTest(a,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let i=0;i!==s;i++){const n=t[i];n.aabbNeedsUpdate&&n.updateAABB()}e===0?vt.insertionSortX(t):e===1?vt.insertionSortY(t):e===2&&vt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,n=0,o=0;const r=this.axisList,l=r.length,a=1/l;for(let f=0;f!==l;f++){const p=r[f],y=p.position.x;t+=y,e+=y*y;const m=p.position.y;s+=m,i+=m*m;const w=p.position.z;n+=w,o+=w*w}const d=e-t*t*a,u=i-s*s*a,h=o-n*n*a;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let n="x";i===1&&(n="y"),i===2&&(n="z");const o=this.axisList;e.lowerBound[n],e.upperBound[n];for(let r=0;r<o.length;r++){const l=o[r];l.aabbNeedsUpdate&&l.updateAABB(),l.aabb.overlaps(e)&&s.push(l)}return s}}class is{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class Ut{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class yt{constructor(t,e,s,i){s===void 0&&(s=-1e6),i===void 0&&(i=1e6),this.id=yt.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Ut,this.jacobianElementB=new Ut,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,n=t,o=s;this.a=4/(o*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(o*o*n*(1+4*i))}computeB(t,e,s){const i=this.computeGW(),n=this.computeGq(),o=this.computeGiMf();return-n*t-i*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.position,o=i.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.velocity,o=i.velocity,r=s.angularVelocity,l=i.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.vlambda,o=i.vlambda,r=s.wlambda,l=i.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.force,o=s.torque,r=i.force,l=i.torque,a=s.invMassSolve,d=i.invMassSolve;return n.scale(a,$t),r.scale(d,Zt),s.invInertiaWorldSolve.vmult(o,Kt),i.invInertiaWorldSolve.vmult(l,Jt),t.multiplyVectors($t,Kt)+e.multiplyVectors(Zt,Jt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.invMassSolve,o=i.invMassSolve,r=s.invInertiaWorldSolve,l=i.invInertiaWorldSolve;let a=n+o;return r.vmult(t.rotational,bt),a+=bt.dot(t.rotational),l.vmult(e.rotational,bt),a+=bt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,n=this.bj,o=ns;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,s.spatial,n.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda),n.invInertiaWorldSolve.vmult(s.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}yt.idCounter=0;const $t=new c,Zt=new c,Kt=new c,Jt=new c,bt=new c,ns=new c;class os extends yt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,i=this.bi,n=this.bj,o=this.ri,r=this.rj,l=rs,a=cs,d=i.velocity,u=i.angularVelocity;i.force,i.torque;const h=n.velocity,f=n.angularVelocity;n.force,n.torque;const p=ls,y=this.jacobianElementA,m=this.jacobianElementB,w=this.ni;o.cross(w,l),r.cross(w,a),w.negate(y.spatial),l.negate(y.rotational),m.spatial.copy(w),m.rotational.copy(a),p.copy(n.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(o,p);const v=w.dot(p),x=this.restitution+1,g=x*h.dot(w)-x*d.dot(w)+f.dot(a)-u.dot(l),E=this.computeGiMf();return-v*e-g*s-t*E}getImpactVelocityAlongNormal(){const t=as,e=hs,s=ds,i=us,n=ps;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,n),this.ni.dot(n)}}const rs=new c,cs=new c,ls=new c,as=new c,hs=new c,ds=new c,us=new c,ps=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class Qt extends yt{constructor(t,e,s){super(t,e,-s,s),this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,n=fs,o=vs,r=this.t;s.cross(r,n),i.cross(r,o);const l=this.jacobianElementA,a=this.jacobianElementB;r.negate(l.spatial),n.negate(l.rotational),a.spatial.copy(r),a.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const fs=new c,vs=new c;class At{constructor(t,e,s){s=is.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=At.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}At.idCounter=0;class Nt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Nt.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Nt.idCounter=0;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new V;new c;new c;new c;new c(1,0,0),new c(0,1,0),new c(0,0,1);new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class Wi extends S{constructor(){super({type:S.types.PLANE}),this.worldNormal=new c,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new c),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){tt.set(0,0,1),e.vmult(tt,tt);const n=Number.MAX_VALUE;s.set(-n,-n,-n),i.set(n,n,n),tt.x===1?i.x=t.x:tt.x===-1&&(s.x=t.x),tt.y===1?i.y=t.y:tt.y===-1&&(s.y=t.y),tt.z===1?i.z=t.z:tt.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const tt=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new U;new c;new U;new c;new c;new c;new c;new c;new c;new c;new U;new c;new W;new U;class ms{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class ys extends ms{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,a=l.length,d=t;let u,h,f,p,y,m;if(r!==0)for(let g=0;g!==a;g++)l[g].updateSolveMassProperties();const w=xs,v=gs,x=ws;w.length=r,v.length=r,x.length=r;for(let g=0;g!==r;g++){const E=o[g];x[g]=0,v[g]=E.computeB(d),w[g]=1/E.computeC()}if(r!==0){for(let C=0;C!==a;C++){const B=l[C],F=B.vlambda,_=B.wlambda;F.set(0,0,0),_.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let C=0;C!==r;C++){const B=o[C];u=v[C],h=w[C],m=x[C],y=B.computeGWlambda(),f=h*(u-y-B.eps*m),m+f<B.minForce?f=B.minForce-m:m+f>B.maxForce&&(f=B.maxForce-m),x[C]+=f,p+=f>0?f:-f,B.addToWlambda(f)}if(p*p<n)break}for(let C=0;C!==a;C++){const B=l[C],F=B.velocity,_=B.angularVelocity;B.vlambda.vmul(B.linearFactor,B.vlambda),F.vadd(B.vlambda,F),B.wlambda.vmul(B.angularFactor,B.wlambda),_.vadd(B.wlambda,_)}let g=o.length;const E=1/d;for(;g--;)o[g].multiplier=x[g]*E}return s}}const ws=[],xs=[],gs=[];M.STATIC;class bs{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Es extends bs{constructor(){super(...arguments),this.type=c}constructObject(){return new c}}const k={sphereSphere:S.types.SPHERE,spherePlane:S.types.SPHERE|S.types.PLANE,boxBox:S.types.BOX|S.types.BOX,sphereBox:S.types.SPHERE|S.types.BOX,planeBox:S.types.PLANE|S.types.BOX,convexConvex:S.types.CONVEXPOLYHEDRON,sphereConvex:S.types.SPHERE|S.types.CONVEXPOLYHEDRON,planeConvex:S.types.PLANE|S.types.CONVEXPOLYHEDRON,boxConvex:S.types.BOX|S.types.CONVEXPOLYHEDRON,sphereHeightfield:S.types.SPHERE|S.types.HEIGHTFIELD,boxHeightfield:S.types.BOX|S.types.HEIGHTFIELD,convexHeightfield:S.types.CONVEXPOLYHEDRON|S.types.HEIGHTFIELD,sphereParticle:S.types.PARTICLE|S.types.SPHERE,planeParticle:S.types.PLANE|S.types.PARTICLE,boxParticle:S.types.BOX|S.types.PARTICLE,convexParticle:S.types.PARTICLE|S.types.CONVEXPOLYHEDRON,cylinderCylinder:S.types.CYLINDER,sphereCylinder:S.types.SPHERE|S.types.CYLINDER,planeCylinder:S.types.PLANE|S.types.CYLINDER,boxCylinder:S.types.BOX|S.types.CYLINDER,convexCylinder:S.types.CONVEXPOLYHEDRON|S.types.CYLINDER,heightfieldCylinder:S.types.HEIGHTFIELD|S.types.CYLINDER,particleCylinder:S.types.PARTICLE|S.types.CYLINDER,sphereTrimesh:S.types.SPHERE|S.types.TRIMESH,planeTrimesh:S.types.PLANE|S.types.TRIMESH};class zs{get[k.sphereSphere](){return this.sphereSphere}get[k.spherePlane](){return this.spherePlane}get[k.boxBox](){return this.boxBox}get[k.sphereBox](){return this.sphereBox}get[k.planeBox](){return this.planeBox}get[k.convexConvex](){return this.convexConvex}get[k.sphereConvex](){return this.sphereConvex}get[k.planeConvex](){return this.planeConvex}get[k.boxConvex](){return this.boxConvex}get[k.sphereHeightfield](){return this.sphereHeightfield}get[k.boxHeightfield](){return this.boxHeightfield}get[k.convexHeightfield](){return this.convexHeightfield}get[k.sphereParticle](){return this.sphereParticle}get[k.planeParticle](){return this.planeParticle}get[k.boxParticle](){return this.boxParticle}get[k.convexParticle](){return this.convexParticle}get[k.cylinderCylinder](){return this.convexConvex}get[k.sphereCylinder](){return this.sphereConvex}get[k.planeCylinder](){return this.planeConvex}get[k.boxCylinder](){return this.boxConvex}get[k.convexCylinder](){return this.convexConvex}get[k.heightfieldCylinder](){return this.heightfieldCylinder}get[k.particleCylinder](){return this.particleCylinder}get[k.sphereTrimesh](){return this.sphereTrimesh}get[k.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Es,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new os(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,d=i.material||e.material;return a&&d&&a.restitution>=0&&d.restitution>=0&&(r.restitution=a.restitution*d.restitution),r.si=n||s,r.sj=o||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,n=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let a=l.friction;const d=n.material||s.material,u=o.material||i.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(a=d.friction*u.friction),a>0){const h=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+i.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,y=p.length?p.pop():new Qt(s,i,h*f),m=p.length?p.pop():new Qt(s,i,h*f);return y.bi=m.bi=s,y.bj=m.bj=i,y.minForce=m.minForce=-h*f,y.maxForce=m.maxForce=h*f,y.ri.copy(t.ri),y.rj.copy(t.rj),m.ri.copy(t.ri),m.rj.copy(t.rj),t.ni.tangents(y.t,m.t),y.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),m.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),y.enabled=m.enabled=t.enabled,e.push(y,m),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];rt.setZero(),at.setZero(),ht.setZero();const n=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==n?(rt.vadd(e.ni,rt),at.vadd(e.ri,at),ht.vadd(e.rj,ht)):(rt.vsub(e.ni,rt),at.vadd(e.rj,at),ht.vadd(e.ri,ht));const o=1/t;at.scale(o,s.ri),ht.scale(o,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),rt.normalize(),rt.tangents(s.t,i.t)}getContacts(t,e,s,i,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=i,this.frictionResult=o;const l=Ns,a=Bs,d=Cs,u=As;for(let h=0,f=t.length;h!==f;h++){const p=t[h],y=e[h];let m=null;p.material&&y.material&&(m=s.getContactMaterial(p.material,y.material)||null);const w=p.type&M.KINEMATIC&&y.type&M.STATIC||p.type&M.STATIC&&y.type&M.KINEMATIC||p.type&M.KINEMATIC&&y.type&M.KINEMATIC;for(let v=0;v<p.shapes.length;v++){p.quaternion.mult(p.shapeOrientations[v],l),p.quaternion.vmult(p.shapeOffsets[v],d),d.vadd(p.position,d);const x=p.shapes[v];for(let g=0;g<y.shapes.length;g++){y.quaternion.mult(y.shapeOrientations[g],a),y.quaternion.vmult(y.shapeOffsets[g],u),u.vadd(y.position,u);const E=y.shapes[g];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let C=null;x.material&&E.material&&(C=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=C||m||s.defaultContactMaterial;const B=x.type|E.type,F=this[B];if(F){let _=!1;x.type<E.type?_=F.call(this,x,E,d,u,l,a,p,y,x,E,w):_=F.call(this,E,x,u,d,a,l,y,p,x,E,w),_&&w&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(p.id,y.id))}}}}}sphereSphere(t,e,s,i,n,o,r,l,a,d,u){if(u)return s.distanceSquared(i)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,l,t,e,a,d);i.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(i,h.rj),h.rj.vsub(l.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,i,n,o,r,l,a,d,u){const h=this.createContactEquation(r,l,t,e,a,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(i,Et),h.ni.scale(h.ni.dot(Et),te),Et.vsub(te,h.rj),-Et.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(i,p),p.vsub(l.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,n,o,r,l,t,e,u)}sphereBox(t,e,s,i,n,o,r,l,a,d,u){const h=this.v3pool,f=Qs;s.vsub(i,zt),e.getSideNormals(f,o);const p=t.radius;let y=!1;const m=ei,w=si,v=ii;let x=null,g=0,E=0,C=0,B=null;for(let z=0,j=f.length;z!==j&&y===!1;z++){const R=Zs;R.copy(f[z]);const L=R.length();R.normalize();const D=zt.dot(R);if(D<L+p&&D>0){const Y=Ks,I=Js;Y.copy(f[(z+1)%3]),I.copy(f[(z+2)%3]);const lt=Y.length(),wt=I.length();Y.normalize(),I.normalize();const Bt=zt.dot(Y),St=zt.dot(I);if(Bt<lt&&Bt>-lt&&St<wt&&St>-wt){const Wt=Math.abs(D-L-p);if((B===null||Wt<B)&&(B=Wt,E=Bt,C=St,x=L,m.copy(R),w.copy(Y),v.copy(I),g++,u))return!0}}}if(g){y=!0;const z=this.createContactEquation(r,l,t,e,a,d);m.scale(-p,z.ri),z.ni.copy(m),z.ni.negate(z.ni),m.scale(x,m),w.scale(E,w),m.vadd(w,m),v.scale(C,v),m.vadd(v,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(i,z.rj),z.rj.vsub(l.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let F=h.get();const _=ti;for(let z=0;z!==2&&!y;z++)for(let j=0;j!==2&&!y;j++)for(let R=0;R!==2&&!y;R++)if(F.set(0,0,0),z?F.vadd(f[0],F):F.vsub(f[0],F),j?F.vadd(f[1],F):F.vsub(f[1],F),R?F.vadd(f[2],F):F.vsub(f[2],F),i.vadd(F,_),_.vsub(s,_),_.lengthSquared()<p*p){if(u)return!0;y=!0;const L=this.createContactEquation(r,l,t,e,a,d);L.ri.copy(_),L.ri.normalize(),L.ni.copy(L.ri),L.ri.scale(p,L.ri),L.rj.copy(F),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(i,L.rj),L.rj.vsub(l.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}h.release(F),F=null;const T=h.get(),P=h.get(),q=h.get(),b=h.get(),N=h.get(),A=f.length;for(let z=0;z!==A&&!y;z++)for(let j=0;j!==A&&!y;j++)if(z%3!==j%3){f[j].cross(f[z],T),T.normalize(),f[z].vadd(f[j],P),q.copy(s),q.vsub(P,q),q.vsub(i,q);const R=q.dot(T);T.scale(R,b);let L=0;for(;L===z%3||L===j%3;)L++;N.copy(s),N.vsub(b,N),N.vsub(P,N),N.vsub(i,N);const D=Math.abs(R),Y=N.length();if(D<f[L].length()&&Y<p){if(u)return!0;y=!0;const I=this.createContactEquation(r,l,t,e,a,d);P.vadd(b,I.rj),I.rj.copy(I.rj),N.negate(I.ni),I.ni.normalize(),I.ri.copy(I.rj),I.ri.vadd(i,I.ri),I.ri.vsub(s,I.ri),I.ri.normalize(),I.ri.scale(p,I.ri),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),I.rj.vadd(i,I.rj),I.rj.vsub(l.position,I.rj),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult)}}h.release(T,P,q,b,N)}planeBox(t,e,s,i,n,o,r,l,a,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,n,o,r,l,t,e,u)}convexConvex(t,e,s,i,n,o,r,l,a,d,u,h,f){const p=wi;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,n,i,o,p,h,f)){const y=[],m=xi;t.clipAgainstHull(s,n,e,i,o,p,-100,100,y);let w=0;for(let v=0;v!==y.length;v++){if(u)return!0;const x=this.createContactEquation(r,l,t,e,a,d),g=x.ri,E=x.rj;p.negate(x.ni),y[v].normal.negate(m),m.scale(y[v].depth,m),y[v].point.vadd(m,g),E.copy(y[v].point),g.vsub(s,g),E.vsub(i,E),g.vadd(s,g),g.vsub(r.position,g),E.vadd(i,E),E.vsub(l.position,E),this.result.push(x),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,i,n,o,r,l,a,d,u){const h=this.v3pool;s.vsub(i,ni);const f=e.faceNormals,p=e.faces,y=e.vertices,m=t.radius;let w=!1;for(let v=0;v!==y.length;v++){const x=y[v],g=li;o.vmult(x,g),i.vadd(g,g);const E=ci;if(g.vsub(s,E),E.lengthSquared()<m*m){if(u)return!0;w=!0;const C=this.createContactEquation(r,l,t,e,a,d);C.ri.copy(E),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(m,C.ri),g.vsub(i,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(i,C.rj),C.rj.vsub(l.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let v=0,x=p.length;v!==x&&w===!1;v++){const g=f[v],E=p[v],C=ai;o.vmult(g,C);const B=hi;o.vmult(y[E[0]],B),B.vadd(i,B);const F=di;C.scale(-m,F),s.vadd(F,F);const _=ui;F.vsub(B,_);const T=_.dot(C),P=pi;if(s.vsub(B,P),T<0&&P.dot(C)>0){const q=[];for(let b=0,N=E.length;b!==N;b++){const A=h.get();o.vmult(y[E[b]],A),i.vadd(A,A),q.push(A)}if($s(q,C,s)){if(u)return!0;w=!0;const b=this.createContactEquation(r,l,t,e,a,d);C.scale(-m,b.ri),C.negate(b.ni);const N=h.get();C.scale(-T,N);const A=h.get();C.scale(-m,A),s.vsub(i,b.rj),b.rj.vadd(A,b.rj),b.rj.vadd(N,b.rj),b.rj.vadd(i,b.rj),b.rj.vsub(l.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),h.release(N),h.release(A),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let z=0,j=q.length;z!==j;z++)h.release(q[z]);return}else for(let b=0;b!==E.length;b++){const N=h.get(),A=h.get();o.vmult(y[E[(b+1)%E.length]],N),o.vmult(y[E[(b+2)%E.length]],A),i.vadd(N,N),i.vadd(A,A);const z=oi;A.vsub(N,z);const j=ri;z.unit(j);const R=h.get(),L=h.get();s.vsub(N,L);const D=L.dot(j);j.scale(D,R),R.vadd(N,R);const Y=h.get();if(R.vsub(s,Y),D>0&&D*D<z.lengthSquared()&&Y.lengthSquared()<m*m){if(u)return!0;const I=this.createContactEquation(r,l,t,e,a,d);R.vsub(i,I.rj),R.vsub(s,I.ni),I.ni.normalize(),I.ni.scale(m,I.ri),I.rj.vadd(i,I.rj),I.rj.vsub(l.position,I.rj),I.ri.vadd(s,I.ri),I.ri.vsub(r.position,I.ri),this.result.push(I),this.createFrictionEquationsFromContact(I,this.frictionResult);for(let lt=0,wt=q.length;lt!==wt;lt++)h.release(q[lt]);h.release(N),h.release(A),h.release(R),h.release(Y),h.release(L);return}h.release(N),h.release(A),h.release(R),h.release(Y),h.release(L)}for(let b=0,N=q.length;b!==N;b++)h.release(q[b])}}}planeConvex(t,e,s,i,n,o,r,l,a,d,u){const h=fi,f=vi;f.set(0,0,1),n.vmult(f,f);let p=0;const y=mi;for(let m=0;m!==e.vertices.length;m++)if(h.copy(e.vertices[m]),o.vmult(h,h),i.vadd(h,h),h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const v=this.createContactEquation(r,l,t,e,a,d),x=yi;f.scale(f.dot(y),x),h.vsub(x,x),x.vsub(s,v.ri),v.ni.copy(f),h.vsub(i,v.rj),v.ri.vadd(s,v.ri),v.ri.vsub(r.position,v.ri),v.rj.vadd(i,v.rj),v.rj.vsub(l.position,v.rj),this.result.push(v),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(v,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,n,o,r,l,t,e,u)}sphereHeightfield(t,e,s,i,n,o,r,l,a,d,u){const h=e.data,f=t.radius,p=e.elementSize,y=Fi,m=Ti;W.pointToLocalFrame(i,o,s,m);let w=Math.floor((m.x-f)/p)-1,v=Math.ceil((m.x+f)/p)+1,x=Math.floor((m.y-f)/p)-1,g=Math.ceil((m.y+f)/p)+1;if(v<0||g<0||w>h.length||x>h[0].length)return;w<0&&(w=0),v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),w>=h.length&&(w=h.length-1),v>=h.length&&(v=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const E=[];e.getRectMinMax(w,x,v,g,E);const C=E[0],B=E[1];if(m.z-f>B||m.z+f<C)return;const F=this.result;for(let _=w;_<v;_++)for(let T=x;T<g;T++){const P=F.length;let q=!1;if(e.getConvexTrianglePillar(_,T,!1),W.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,l,t,e,u)),u&&q||(e.getConvexTrianglePillar(_,T,!0),W.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(q=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,l,t,e,u)),u&&q))return!0;if(F.length-P>2)return}}boxHeightfield(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,n,o,r,l,t,e,u)}convexHeightfield(t,e,s,i,n,o,r,l,a,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,y=Si,m=Mi,w=Bi;W.pointToLocalFrame(i,o,s,w);let v=Math.floor((w.x-p)/f)-1,x=Math.ceil((w.x+p)/f)+1,g=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(x<0||E<0||v>h.length||g>h[0].length)return;v<0&&(v=0),x<0&&(x=0),g<0&&(g=0),E<0&&(E=0),v>=h.length&&(v=h.length-1),x>=h.length&&(x=h.length-1),E>=h[0].length&&(E=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const C=[];e.getRectMinMax(v,g,x,E,C);const B=C[0],F=C[1];if(!(w.z-p>F||w.z+p<B))for(let _=v;_<x;_++)for(let T=g;T<E;T++){let P=!1;if(e.getConvexTrianglePillar(_,T,!1),W.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,l,null,null,u,m,null)),u&&P||(e.getConvexTrianglePillar(_,T,!0),W.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,l,null,null,u,m,null)),u&&P))return!0}}sphereParticle(t,e,s,i,n,o,r,l,a,d,u){const h=zi;if(h.set(0,0,1),i.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(l,r,e,t,a,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,i,n,o,r,l,a,d,u){const h=gi;h.set(0,0,1),r.quaternion.vmult(h,h);const f=bi;if(i.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const y=this.createContactEquation(l,r,e,t,a,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const m=Ei;h.scale(h.dot(i),m),i.vsub(m,m),y.rj.copy(m),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,i,n,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,n,o,r,l,t,e,u)}convexParticle(t,e,s,i,n,o,r,l,a,d,u){let h=-1;const f=Ai,p=Ni;let y=null;const m=Ci;if(m.copy(i),m.vsub(s,m),n.conjugate(ee),ee.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let w=0,v=t.faces.length;w!==v;w++){const x=[t.worldVertices[t.faces[w][0]]],g=t.worldFaceNormals[w];i.vsub(x[0],se);const E=-g.dot(se);if(y===null||Math.abs(E)<Math.abs(y)){if(u)return!0;y=E,h=w,f.copy(g)}}if(h!==-1){const w=this.createContactEquation(l,r,e,t,a,d);f.scale(y,p),p.vadd(i,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const v=w.ri,x=w.rj;v.vadd(i,v),v.vsub(l.position,v),x.vadd(s,x),x.vsub(r.position,x),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,n,o,r,l,a,d,u){return this.convexHeightfield(e,t,i,s,o,n,l,r,a,d,u)}particleCylinder(t,e,s,i,n,o,r,l,a,d,u){return this.convexParticle(e,t,i,s,o,n,l,r,a,d,u)}sphereTrimesh(t,e,s,i,n,o,r,l,a,d,u){const h=Rs,f=qs,p=Ls,y=Os,m=Ws,w=ks,v=Hs,x=_s,g=Is,E=Ys;W.pointToLocalFrame(i,o,s,m);const C=t.radius;v.lowerBound.set(m.x-C,m.y-C,m.z-C),v.upperBound.set(m.x+C,m.y+C,m.z+C),e.getTrianglesInAABB(v,E);const B=Ps,F=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let N=0;N<3;N++)if(e.getVertex(e.indices[E[b]*3+N],B),B.vsub(m,g),g.lengthSquared()<=F){if(x.copy(B),W.pointToWorldFrame(i,o,x,B),B.vsub(s,g),u)return!0;let A=this.createContactEquation(r,l,t,e,a,d);A.ni.copy(g),A.ni.normalize(),A.ri.copy(A.ni),A.ri.scale(t.radius,A.ri),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.copy(B),A.rj.vsub(l.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult)}for(let b=0;b<E.length;b++)for(let N=0;N<3;N++){e.getVertex(e.indices[E[b]*3+N],h),e.getVertex(e.indices[E[b]*3+(N+1)%3],f),f.vsub(h,p),m.vsub(f,w);const A=w.dot(p);m.vsub(h,w);let z=w.dot(p);if(z>0&&A<0&&(m.vsub(h,w),y.copy(p),y.normalize(),z=w.dot(y),y.scale(z,w),w.vadd(h,w),w.distanceTo(m)<t.radius)){if(u)return!0;const R=this.createContactEquation(r,l,t,e,a,d);w.vsub(m,R.ni),R.ni.normalize(),R.ni.scale(t.radius,R.ri),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),W.pointToWorldFrame(i,o,w,w),w.vsub(l.position,R.rj),W.vectorToWorldFrame(o,R.ni,R.ni),W.vectorToWorldFrame(o,R.ri,R.ri),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult)}}const _=js,T=Vs,P=Gs,q=Fs;for(let b=0,N=E.length;b!==N;b++){e.getTriangleVertices(E[b],_,T,P),e.getNormal(E[b],q),m.vsub(_,w);let A=w.dot(q);if(q.scale(A,w),m.vsub(w,w),A=w.distanceTo(m),V.pointInTriangle(w,_,T,P)&&A<t.radius){if(u)return!0;let z=this.createContactEquation(r,l,t,e,a,d);w.vsub(m,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),W.pointToWorldFrame(i,o,w,w),w.vsub(l.position,z.rj),W.vectorToWorldFrame(o,z.ni,z.ni),W.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,i,n,o,r,l,a,d,u){const h=new c,f=Ss;f.set(0,0,1),n.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const y=new c;y.copy(h),W.pointToWorldFrame(i,o,y,h);const m=Ms;if(h.vsub(s,m),f.dot(m)<=0){if(u)return!0;const v=this.createContactEquation(r,l,t,e,a,d);v.ni.copy(f);const x=Ts;f.scale(m.dot(f),x),h.vsub(x,x),v.ri.copy(x),v.ri.vsub(r.position,v.ri),v.rj.copy(h),v.rj.vsub(l.position,v.rj),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}}}const rt=new c,at=new c,ht=new c,Cs=new c,As=new c,Ns=new G,Bs=new G,Ss=new c,Ms=new c,Ts=new c,Fs=new c,Is=new c;new c;const Ps=new c,_s=new c,Rs=new c,qs=new c,Ls=new c,Os=new c,Ws=new c,ks=new c,js=new c,Vs=new c,Gs=new c,Hs=new U,Ys=[],Et=new c,te=new c,Ds=new c,Xs=new c,Us=new c;function $s(O,t,e){let s=null;const i=O.length;for(let n=0;n!==i;n++){const o=O[n],r=Ds;O[(n+1)%i].vsub(o,r);const l=Xs;r.cross(t,l);const a=Us;e.vsub(o,a);const d=l.dot(a);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const zt=new c,Zs=new c,Ks=new c,Js=new c,Qs=[new c,new c,new c,new c,new c,new c],ti=new c,ei=new c,si=new c,ii=new c,ni=new c,oi=new c,ri=new c,ci=new c,li=new c,ai=new c,hi=new c,di=new c,ui=new c,pi=new c;new c;new c;const fi=new c,vi=new c,mi=new c,yi=new c,wi=new c,xi=new c,gi=new c,bi=new c,Ei=new c,zi=new c,ee=new G,Ci=new c;new c;const Ai=new c,se=new c,Ni=new c,Bi=new c,Si=new c,Mi=[0],Ti=new c,Fi=new c;class ie{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let n=0;for(;s>i[n];)n++;if(s!==i[n]){for(let o=i.length-1;o>=n;o--)i[o+1]=i[o];i[n]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,n=s.length,o=i.length;let r=0;for(let l=0;l<n;l++){let a=!1;const d=s[l];for(;d>i[r];)r++;a=d===i[r],a||ne(t,d)}r=0;for(let l=0;l<o;l++){let a=!1;const d=i[l];for(;d>s[r];)r++;a=s[r]===d,a||ne(e,d)}}}function ne(O,t){O.push((t&4294901760)>>16,t&65535)}const Pt=(O,t)=>O<t?`${O}-${t}`:`${t}-${O}`;class Ii{constructor(){this.data={keys:[]}}get(t,e){const s=Pt(t,e);return this.data[s]}set(t,e,s){const i=Pt(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=Pt(t,e),i=this.data.keys.indexOf(s);i!==-1&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class ki extends oe{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new ke,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new ys,this.constraints=[],this.narrowphase=new zs(this),this.collisionMatrix=new Gt,this.collisionMatrixPrevious=new Gt,this.bodyOverlapKeeper=new ie,this.shapeOverlapKeeper=new ie,this.contactmaterials=[],this.contactMaterialTable=new Ii,this.defaultMaterial=new Nt("default"),this.defaultContactMaterial=new At(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Ct?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return s===void 0&&(s={}),s.mode=V.ALL,s.from=t,s.to=e,s.callback=i,_t.intersectWorld(this,s)}raycastAny(t,e,s,i){return s===void 0&&(s={}),s.mode=V.ANY,s.from=t,s.to=e,s.result=i,_t.intersectWorld(this,s)}raycastClosest(t,e,s,i){return s===void 0&&(s={}),s.mode=V.CLOSEST,s.from=t,s.to=e,s.result=i,_t.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof M&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(i!==-1){s.splice(i,1);for(let n=0;n!==s.length;n++)s[n].index=n;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let n=0;n<i.length;n++){const o=i[n];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=H.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const i=s-this.lastCallTime;this.step(t,i,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=H.now();let n=0;for(;this.accumulator>=t&&n<s&&(this.internalStep(t),this.accumulator-=t,n++,!(H.now()-i>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Li,i=Oi,n=this.bodies.length,o=this.bodies,r=this.solver,l=this.gravity,a=this.doProfiling,d=this.profile,u=M.DYNAMIC;let h=-1/0;const f=this.constraints,p=qi;l.length();const y=l.x,m=l.y,w=l.z;let v=0;for(a&&(h=H.now()),v=0;v!==n;v++){const b=o[v];if(b.type===u){const N=b.force,A=b.mass;N.x+=A*y,N.y+=A*m,N.z+=A*w}}for(let b=0,N=this.subsystems.length;b!==N;b++)this.subsystems[b].update();a&&(h=H.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),a&&(d.broadphase=H.now()-h);let x=f.length;for(v=0;v!==x;v++){const b=f[v];if(!b.collideConnected)for(let N=s.length-1;N>=0;N-=1)(b.bodyA===s[N]&&b.bodyB===i[N]||b.bodyB===s[N]&&b.bodyA===i[N])&&(s.splice(N,1),i.splice(N,1))}this.collisionMatrixTick(),a&&(h=H.now());const g=Ri,E=e.length;for(v=0;v!==E;v++)g.push(e[v]);e.length=0;const C=this.frictionEquations.length;for(v=0;v!==C;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),a&&(d.narrowphase=H.now()-h),a&&(h=H.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const B=e.length;for(let b=0;b!==B;b++){const N=e[b],A=N.bi,z=N.bj,j=N.si,R=N.sj;let L;if(A.material&&z.material?L=this.getContactMaterial(A.material,z.material)||this.defaultContactMaterial:L=this.defaultContactMaterial,L.friction,A.material&&z.material&&(A.material.friction>=0&&z.material.friction>=0&&A.material.friction*z.material.friction,A.material.restitution>=0&&z.material.restitution>=0&&(N.restitution=A.material.restitution*z.material.restitution)),r.addEquation(N),A.allowSleep&&A.type===M.DYNAMIC&&A.sleepState===M.SLEEPING&&z.sleepState===M.AWAKE&&z.type!==M.STATIC){const D=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),Y=z.sleepSpeedLimit**2;D>=Y*2&&(A.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===M.DYNAMIC&&z.sleepState===M.SLEEPING&&A.sleepState===M.AWAKE&&A.type!==M.STATIC){const D=A.velocity.lengthSquared()+A.angularVelocity.lengthSquared(),Y=A.sleepSpeedLimit**2;D>=Y*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(A,z,!0),this.collisionMatrixPrevious.get(A,z)||(ut.body=z,ut.contact=N,A.dispatchEvent(ut),ut.body=A,z.dispatchEvent(ut)),this.bodyOverlapKeeper.set(A.id,z.id),this.shapeOverlapKeeper.set(j.id,R.id)}for(this.emitContactEvents(),a&&(d.makeContactConstraints=H.now()-h,h=H.now()),v=0;v!==n;v++){const b=o[v];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,v=0;v!==x;v++){const b=f[v];b.update();for(let N=0,A=b.equations.length;N!==A;N++){const z=b.equations[N];r.addEquation(z)}}r.solve(t,this),a&&(d.solve=H.now()-h),r.removeAllEquations();const F=Math.pow;for(v=0;v!==n;v++){const b=o[v];if(b.type&u){const N=F(1-b.linearDamping,t),A=b.velocity;A.scale(N,A);const z=b.angularVelocity;if(z){const j=F(1-b.angularDamping,t);z.scale(j,z)}}}this.dispatchEvent(_i),a&&(h=H.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,P=this.quatNormalizeFast;for(v=0;v!==n;v++)o[v].integrate(t,T,P);this.clearForces(),this.broadphase.dirty=!0,a&&(d.integrate=H.now()-h),this.stepnumber+=1,this.dispatchEvent(Pi);let q=!0;if(this.allowSleep)for(q=!1,v=0;v!==n;v++){const b=o[v];b.sleepTick(this.time),b.sleepState!==M.SLEEPING&&(q=!0)}this.hasActiveBodies=q}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(et,st),t){for(let n=0,o=et.length;n<o;n+=2)pt.bodyA=this.getBodyById(et[n]),pt.bodyB=this.getBodyById(et[n+1]),this.dispatchEvent(pt);pt.bodyA=pt.bodyB=null}if(e){for(let n=0,o=st.length;n<o;n+=2)ft.bodyA=this.getBodyById(st[n]),ft.bodyB=this.getBodyById(st[n+1]),this.dispatchEvent(ft);ft.bodyA=ft.bodyB=null}et.length=st.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(et,st),s){for(let n=0,o=et.length;n<o;n+=2){const r=this.getShapeById(et[n]),l=this.getShapeById(et[n+1]);it.shapeA=r,it.shapeB=l,r&&(it.bodyA=r.body),l&&(it.bodyB=l.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}if(i){for(let n=0,o=st.length;n<o;n+=2){const r=this.getShapeById(st[n]),l=this.getShapeById(st[n+1]);nt.shapeA=r,nt.shapeB=l,r&&(nt.bodyA=r.body),l&&(nt.bodyB=l.body),this.dispatchEvent(nt)}nt.bodyA=nt.bodyB=nt.shapeA=nt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const i=t[s];i.force,i.torque,i.force.set(0,0,0),i.torque.set(0,0,0)}}}new U;const _t=new V,H=globalThis.performance||{};if(!H.now){let O=Date.now();H.timing&&H.timing.navigationStart&&(O=H.timing.navigationStart),H.now=()=>Date.now()-O}new c;const Pi={type:"postStep"},_i={type:"preStep"},ut={type:M.COLLIDE_EVENT_NAME,body:null,contact:null},Ri=[],qi=[],Li=[],Oi=[],et=[],st=[],pt={type:"beginContact",bodyA:null,bodyB:null},ft={type:"endContact",bodyA:null,bodyB:null},it={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},nt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};export{M as B,Wi as P,G as Q,vt as S,c as V,ki as W,Rt as a,S as b};
